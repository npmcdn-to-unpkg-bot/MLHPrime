import pybrain
import json

PARAMS_PATH = "./ml/data/params.json"
TRAINING_DATA_PATH = "./ml/data/training.json"

IDLE = "idle"
UP = "up"
DOWN = "down"
LEFT = "left"
RIGHT = "right"

SAMPLE_SIZE = 50

strToVecOutMap = {
    IDLE: [0, 0, 0, 0, 1],
    UP: [0, 0, 0, 1, 0],
    DOWN: [0, 0, 1, 0, 0],
    LEFT: [0, 1, 0, 0, 0],
    RIGHT: [1, 0, 0, 0, 0]
}

STATES = [IDLE, UP, DOWN, LEFT, RIGHT]
def unrollSamples(samples):
    vec = []
    for sample in samples:
        for val in sample:
            vec.append(val)
    return vec

def createTrainAndSerializeNetwork(data):
    ann = pybrain.buildNetwork(SAMPLE_SIZE * 4, SAMPLE_SIZE * 3, len(STATES))
    """
    FORMAT: {
        output: [
            [
                Number,
                Number,
                Number,
                Number,
            ]
        ]
    }
    """
    ds = SupervisedDataSet(SAMPLE_SIZE * 4, len(STATES))
     
    for key, samples in data.items():
        vec = unrollSamples(samples)
        inp.append(vec)
        out.append(strToVecOutMap[key])
    X = np.array(inp)
    y = np.array(out)
    ds.setField('input', X)
    ds.setField('target', y)
    trainer = BackpropTrainer(ann, ds)
    trainer.trainUntilConvergence( verbose = True, validationProportion = 0.15, maxEpochs = 1000, continueEpochs = 10)
    # serialized = ann.serialize()

def predictState(serialized, samples):
    ann = NeuralNetwork.fromSerialized(hashMap)
    X = unrollSamples(samples)
    y = ann.predict(np.array([X])).tolist()[0]
    # One vs. All
    maxIdx = -1
    maxVal = -1 # Min val of sigmoid
    for i in range(len(STATES)):
        if y[i] > maxVal:
            maxIdx = i
            maxVal = y[i]
    print(STATES[i])

data = {
    "idle" : [
      [
        27.96466636657715,
        325.70611572265625,
        111.8586654663086,
        421.1149597167969
      ],
      [
        27.96466636657715,
        220.4273681640625,
        111.8586654663086,
        315.8362121582031
      ],
      [
        27.96466636657715,
        325.70611572265625,
        164.49803161621094,
        526.3937377929688
      ],
      [
        27.96466636657715,
        220.4273681640625,
        164.49803161621094,
        631.6724243164062
      ],
      [
        27.96466636657715,
        115.14862060546875,
        59.21929168701172,
        210.55747985839844
      ],
      [
        27.96466636657715,
        325.70611572265625,
        190.81771850585938,
        526.3937377929688
      ],
      [
        27.96466636657715,
        220.4273681640625,
        111.8586654663086,
        315.8362121582031
      ],
      [
        27.96466636657715,
        167.78799438476562,
        138.1783447265625,
        421.1149597167969
      ],
      [
        27.96466636657715,
        273.0667419433594,
        217.1374053955078,
        631.6724243164062
      ],
      [
        27.96466636657715,
        430.98486328125,
        296.0964660644531,
        1158.066162109375
      ],
      [
        27.96466636657715,
        273.0667419433594,
        164.49803161621094,
        315.8362121582031
      ],
      [
        27.96466636657715,
        251.68199157714844,
        123.37352752685547,
        631.6724243164062
      ],
      [
        27.96466636657715,
        203.97756958007812,
        92.118896484375,
        210.55747985839844
      ],
      [
        26.319684982299805,
        284.58160400390625,
        139.82333374023438,
        210.55747985839844
      ],
      [
        27.96466636657715,
        251.68199157714844,
        123.37352752685547,
        210.55747985839844
      ],
      [
        27.96466636657715,
        440.854736328125,
        208.91250610351562,
        421.1149597167969
      ],
      [
        27.96466636657715,
        546.1334838867188,
        208.91250610351562,
        736.951171875
      ],
      [
        27.96466636657715,
        440.854736328125,
        156.27313232421875,
        210.55747985839844
      ],
      [
        27.96466636657715,
        440.854736328125,
        156.27313232421875,
        842.2299194335938
      ],
      [
        27.96466636657715,
        282.9366149902344,
        103.63375854492188,
        421.1149597167969
      ],
      [
        27.96466636657715,
        72.37913513183594,
        50.99439239501953,
        105.27873992919922
      ],
      [
        29.60964584350586,
        282.9366149902344,
        156.27313232421875,
        315.8362121582031
      ],
      [
        27.96466636657715,
        282.9366149902344,
        156.27313232421875,
        315.8362121582031
      ],
      [
        27.96466636657715,
        388.2153625488281,
        103.63375854492188,
        315.8362121582031
      ],
      [
        27.96466636657715,
        177.6578826904297,
        50.99439239501953,
        736.951171875
      ],
      [
        27.96466636657715,
        282.9366149902344,
        157.91810607910156,
        736.951171875
      ],
      [
        27.96466636657715,
        388.2153625488281,
        105.27873992919922,
        526.3937377929688
      ],
      [
        27.96466636657715,
        254.97195434570312,
        134.8883819580078,
        1163.0010986328125
      ],
      [
        27.96466636657715,
        412.89007568359375,
        189.17274475097656,
        952.443603515625
      ],
      [
        27.96466636657715,
        412.89007568359375,
        194.10768127441406,
        636.607421875
      ],
      [
        27.96466636657715,
        202.33258056640625,
        69.08917236328125,
        215.492431640625
      ],
      [
        27.96466636657715,
        360.2507019042969,
        185.88278198242188,
        952.443603515625
      ],
      [
        27.96466636657715,
        307.611328125,
        185.88278198242188,
        636.607421875
      ],
      [
        31.254627227783203,
        202.33258056640625,
        133.243408203125,
        426.0498962402344
      ],
      [
        27.96466636657715,
        254.97195434570312,
        133.243408203125,
        426.0498962402344
      ],
      [
        27.96466636657715,
        307.611328125,
        133.243408203125,
        215.492431640625
      ],
      [
        27.96466636657715,
        254.97195434570312,
        133.243408203125,
        162.85305786132812
      ],
      [
        27.96466636657715,
        412.89007568359375,
        185.88278198242188,
        426.0498962402344
      ],
      [
        27.96466636657715,
        307.611328125,
        185.88278198242188,
        215.492431640625
      ],
      [
        27.96466636657715,
        254.97195434570312,
        185.88278198242188,
        847.1648559570312
      ],
      [
        29.60964584350586,
        44.41447067260742,
        133.243408203125,
        320.77117919921875
      ],
      [
        31.254627227783203,
        210.55747985839844,
        185.88278198242188,
        215.492431640625
      ],
      [
        26.319684982299805,
        315.8362121582031,
        80.60403442382812,
        426.0498962402344
      ],
      [
        26.319684982299805,
        210.55747985839844,
        80.60403442382812,
        110.21368408203125
      ],
      [
        27.96466636657715,
        342.1559143066406,
        126.66348266601562,
        531.3286743164062
      ],
      [
        27.96466636657715,
        421.1149597167969,
        152.98316955566406,
        531.3286743164062
      ],
      [
        27.96466636657715,
        368.4755859375,
        159.56309509277344,
        531.3286743164062
      ],
      [
        27.96466636657715,
        315.8362121582031,
        126.66348266601562,
        426.0498962402344
      ],
      [
        27.96466636657715,
        263.1968688964844,
        74.02411651611328,
        215.492431640625
      ],
      [
        27.96466636657715,
        210.55747985839844,
        74.02411651611328,
        268.1318054199219
      ]
    ]
}
ann = pybrain.buildNetwork(SAMPLE_SIZE * 4, SAMPLE_SIZE * 3, len(STATES))
"""
FORMAT: {
    output: [
        [
            Number,
            Number,
            Number,
            Number,
        ]
    ]
}
"""
ds = SupervisedDataSet(SAMPLE_SIZE * 4, len(STATES))
 
for key, samples in data.items():
    vec = unrollSamples(samples)
    inp.append(vec)
    out.append(strToVecOutMap[key])
X = np.array(inp)
y = np.array(out)
ds.setField('input', X)
ds.setField('target', y)
trainer = BackpropTrainer(ann, ds)
trainer.trainUntilConvergence( verbose = True, validationProportion = 0.15, maxEpochs = 1000, continueEpochs = 10)
